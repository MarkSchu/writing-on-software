modular design
  hiding complexity so developers only see a small fraction of complexity at a time

goal of modular design 
  minimize dependences between modules

two parts of a module 
  interface/implementation

def of module 
  anything with an interface and implementation 

best modules 
  interface is simpler than implementation 
  - simple interface minimizes complexity 
  - changes can be isolated to implementation changes 

interface has two kinds of information 
  - formal 
  - informal: anything that isn't formally represented but is a piece of information someone needs to use the module. describeable in comments

two errors in abstraction
  - omitting relevant details => obscurity increase
  - adding irrelevant details => cogitive load increase

deep modules are best 
  small surface, big area

small interfaces that hide complexity are best module
  size of interface is cost complexity of module


// --------


() there are two kinds of fundamental change: interface changes, implementation changes. 

() UIs are abstractions

() A possible counterexample to the deep module: a utility. Consider an array. It has a bunch of methods - find, every, map, reduce, etc. - which are a bunch of helpful things you can do with an array. I don't see any good reason to restrict the size of these kinds of utily methods. It almost seems like the more the better. I can't see the benefit of them not being there over being there. To they add obscurity or dependency? Not really. 

