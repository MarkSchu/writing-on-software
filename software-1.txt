(1) There are consumers and providers. 

(2) The main problem with software is that systems are too big to understand. https://www.youtube.com/watch?v=v_nhv6aY1Kg&t=42s

(3) You might ask two questions: 
1. what is a system 
2. what does it mean for a person to understand a system? 

(4) Tensengrity. A system held together by the balance of opposing forces. Remove one and the whole thing collapses.https://www.youtube.com/watch?v=esm-1QXtA2Q

(5) Coupling may just be interconnection: I change you, you change me.  Decoupled modules then, are modules that can change without the other changing. However, with modules there are always consumers. And if something is consuming a module, then it is coupled. The existence of a method call - module.foo() - and even an import statement is a consumption. 

(6) Why can't you fully plan out a system? Think about a different system: my garden. Why can't I fully plan out my garden? Because I don't know what's going to to work. I can plant this here and that there, but they might die, or they might grow in a way I didn't intend. At bottom, there are unknowns. I don't know what is going to happen. And many of those are unknown unknowns. 

Another way to look at it is this: there are too many possibilities and many possibilities that you're not aware of. In so far as planning plans against what might happen, its hopeless. 

